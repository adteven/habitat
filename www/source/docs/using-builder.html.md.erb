---
title: Using Builder
description: Uploading, building, and deploying application packages with Chef Habitat Builder
---
# <a name="using-builder" id="using-builder" data-magellan-target="using-builder">Using Builder</a>

[Chef Habitat Builder](https://bldr.habitat.sh/) is the publicly available site for storing, discovering, building, and deploying your Chef Habitat packages. This documentation covers actions that you can take on the Chef Habitat Builder site and from the `hab` command line, including creating an account, making and managing an origin, uploading and downloading packages, setting up automated builds, and exporting packages to a variety of container registries.

Chef Habitat Builder supports both public and private origins, packages, and Github repositories.

Many Chef Habitat Builder actions have corresponding `hab` CLI commands, with a few exceptions where actions are possible only from the website or from the `hab` CLI. This documentation tries to be explicit about actions that are exclusive to either the website or the command line. When both are possible, we provide the Builder actions first.

We'll primarily use the `hab origin` command in this documentation. You'll also need `hab pkg` to upload packages from---and download to--your local environment and `hab bldr` for actions related to build jobs and channels. For more information on CLI commands covered in this section, see the full [hab CLI documentation](/docs/habitat-cli/).

---
## <a name="builder-account" id="builder-account" data-magellan-target="builder-account">Create a Builder Account</a>

### Prerequisites

* Download and install the Chef Habitat CLI
* A valid [GitHub account](https://github.com/join)

### Sign-in and Authorize Chef Habitat

Signing in to Chef Habitat Builder automatically creates your account. Chef Habitat Builder uses GitHub for authorization. The first time you sign in, you will also need to authorize the Chef Habitat Builder application in Github.

Use this button to start your sign-in:

<a href="https://bldr.habitat.sh/#/sign-in" class="button cta" target="_blank">Sign in to Chef Habitat Builder</a>

Select "Sign in with GitHub" if you already have a GitHub account. To open a GitHub account, select the "Sign up here" link and return to the Builder sign-in page once you're done.

![Habitat sign in with Github](/images/screenshots/builder_signin.png)

Once you've signed in, authorize the Chef Habitat Builder application to work with your GitHub account. Once you have authorized Chef Habitat and signed in, you'll arrive at the 'My Origins' view.

<img src="/images/screenshots/builder_authorize.png">

---
## <a name="builder-profile" id="builder-profile" data-magellan-target="builder-profile">Set up your Builder Profile</a>

Access your Builder profile by selecting the round icon at the top right corner of the Builder page. To set up your profile, including creating an access token, select the "profiles" option from the drop-down menu.

The Builder Profile contains three parts:

* The GitHub account that you used for signing in to Builder
* An optional email field to associate with your profile
* The tool for creating a personal access token

<img src="/images/screenshots/builder_profile.png">

### <a name="builder-settings" id="builder-settings" data-magellan-target="builder-settings">User Settings</a>

<!--User settings is a sub-task of Creating an Account
/task
  /title
  /taskbody
    /prereq
    /context
    /steps-informal
    /result
    /postreq
-->
You cannot directly edit the GitHub account on the Builder profile.
task: Set email
result: shows avatar

That are not connected under a single user account, then you will also need to have more than one Builder account. If you have more than one GitHub account, for example a work account and a personal account, associating these accounts through GitHub allows you to access all of your repos with Habitat plan files through Builder. You can choose which profile to connect to Builder by entering your preferred email address. The generic profile icon will change to show the gravatar associated with the GitHub account associated with that email. Save your changes by selecting `save`.

<img src="/images/screenshots/builder_profile_user.png">

### <a name="builder-token" id="builder-token" data-magellan-target="builder-token">Personal Access Token</a>

<!--Creating a PAT is a sub-task of making an account
/task : Generate a personal Access Token
  /title
  /taskbody
    /prereq
    /context
    /steps-informal
    /result
    /postreq
-->

<%# context: %>
Chef Habitat Builder requires a _personal access token_ to interact with your command-line environment. The personal access token is another level of authentication, which helps secure activities such as uploading your artifacts to Builder, or checking the status of your build jobs.

<%# step 1 %>
Create your personal access token at the bottom of the profile page (below the save button), by selecting **Generate Token**.

<img src="/images/screenshots/generate-token.png">
<%# step 2 %>
Copy your token from this page and save it in a safe location.
If you forget your personal access token, you will need to generate a new one.

### PAT as an environment variable

The next sections cover setting your personal access token as an environment variable in Windows and MacOS/Linux operating systems.

#### Windows

Save your Habitat authorization token as a permanent environment variable in Windows using:

```PS
SETX HAB_AUTH_TOKEN <token> /m
```

Replacing <token> with the contents of your generated token.

You can also save your Habitat authorization token as a permanent environment variable using the Windows user interface. In your Windows help bar, enter `environment` and select `Edit the system environment variables` from the list of suggestions.

This opens the `System Properties` window on the `Advanced` tab. Select the `Environment Variables` button.

<img src='/images/screenshots/environment_variable.png'>

In the next window, select the `New` button in the top part. This opens a dialog box that lets you set individual user variables.

<img src='/images/screenshots/environment_variable_new.png'>

Create a permanent environment variable by entering `HAB_AUTH_TOKEN` as the variable name. Next, paste the authorization token that you copied after you generated a new token on your profile page as the variable value. After you select the `OK`, you will see the new token in the user variables field.

<img src='/images/screenshots/environment_variable_new_var.png'>

To test that your new token works, open the Command Prompt---which you can find by entering command in the Windows search box---and entering `echo %HAB_AUTH_TOKEN%`. You should see the value that you pasted into the environment variable.

<img src='/images/screenshots/environment_variable_set.png'>

#### MacOS

Set the HAB_AUTH_TOKEN in the CLI with:

```bash
export HAB_AUTH_TOKEN=<token>
```

Replacing `<token>` with the contents of your generated token.

To use your token across sessions, set it as an environment variable in your interactive shell configuration file, such as your `.bashrc`.

```bash
export HAB_AUTH_TOKEN=<token>
```

Then initialize the path from the command line, by running:

```bash
source ~/.bashrc
```

---
## <a name="builder-origin" id="builder-origin" data-magellan-target="builder-origin">Create an Origin on Builder</a>

<!--Create an Origin is a task
/task
  /title
  /taskbody
    /prereq
    /context
    /steps-informal
    /tutorial-info
    /tutorial-info
    /result
    /postreq
-->
Origins are unique namespaces that can be used to denote a particular upstream of a package. An origin could be the name of your organization or work group, the "core" origin is the set of foundational packages that are managed and versioned by the core Chef Habitat maintainers.

From the My Origins page in the Chef Habitat Builder web app, click the **Create origin** button.

<img src="/images/screenshots/create-origin.png">

<img src="/images/screenshots/builder-create-origin-form.png">

step: 1
### Choose an Origin Name

Pick a unique name that you want to associate with a given set of packages. Some examples that you'll see in Chef Habitat Builder are team names, a user names, and abstract concepts, such as the "core" origin, is the set of foundational packages that are managed and versioned by the core Chef Habitat maintainers.

You can delete empty origins, but if the origin contains packages, keys, or other material, you'll have to remove all of the content from the origin in order to delete it.

step 2:
### Choose a Privacy Setting

This is the default privacy setting for new packages. You can override this setting on individual packages when uploading or connecting a plan file.

Public packages will appear in public search results and can be used by any user, while private packages are restricted to members of the origin.

result:
What happens:
1) Creates origin
2) Creates an origin key
3) Redirects you to the origin settings view and you should see a success alert in the lower right corner

<img src="/images/screenshots/builder-origin-settings.png">

---
## <a name="origin-settings" id="origin-settings" data-magellan-target="origin-settings">Origin Settings</a>

### Default Package Settings

This is the default privacy setting for new packages. You can override this setting on individual packages when uploading or connecting a plan file.

Public packages will appear in public search results and can be used by any user, while private packages are restricted to members of the origin.

You can override the default for individual packages, discussed in the package->settings section

### <a name="origin-secrets" id="origin-secrets" data-magellan-target="origin-secrets">Origin Secrets</a>

Prerequisites:

Personal Access Token
Create an Origin
Origin Key

With the Chef Habitat CLI and a Builder account, you can encrypt and store secrets to expose at build time as environment variables in your Builder builds. This feature is helpful for plans requiring access to protected resources at build time, such as private source-code repositories, cloud storage providers and the like. Secrets are defined at the origin level, which makes them usable in any plan belonging to that origin. Secrets are encrypted locally using an origin encryption key. Their values are readable only by Builder.

Enable secrets in the Origin Integrations tab and see them in the Origin Settings tab.

![Builder origin secrets](/images/screenshots/origin-secrets.png)

For example, to list the names of all secrets defined for a given origin, use the `list` subcommand:

```bash
hab origin secret list --origin <ORIGIN> --auth <TOKEN>
```

You can also set your origin and token as environment variables:

```bash
export HAB_ORIGIN=<ORIGIN>
export HAB_AUTH_TOKEN=<TOKEN>
hab origin secret list
```

To create a new secret, give the secret a name and string value:

```bash
hab origin secret upload AWS_ACCESS_KEY_ID your-key-id
hab origin secret upload AWS_SECRET_ACCESS_KEY your-secret-access-key
```

After uploading your secret, you can refer to it in your plan file as an environment variable, and Builder will supply its decrypted value during your build job.

For instance, if a plan required access to a file kept in a private bucket on Amazon S3, you might use the AWS CLI provided by the `core/awscli` package to download the file using secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`, which would allow the `aws` binary to read them as environment variables at build time:

```bash
...
pkg_build_deps=(core/awscli)

do_download() {
  # When present, the AWS CLI will use the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
  # environment variables to authenticate with Amazon S3.
  aws s3 cp s3://your-private-bucket/your-file.tar.gz .
}
...
```

You can delete a secret either with the Chef Habitat CLI:

```bash
hab origin secret delete AWS_ACCESS_KEY_ID
hab origin secret delete AWS_SECRET_ACCESS_KEY
```

---
<!-- Builder section 1: Settings

/task
  /title
  /taskbody
    /prereq
    /context
    /steps-informal
    /tutorial-info
    /tutorial-info
    /result
    /postreq

1. Settings
1. Keys
1. Members
1. Integrations
1. Packages
1. Build Jobs
-->
A Chef Habitat Builder origin has six tabs:

1. Packages
1. Build Jobs
1. Keys
1. Members
1. Settings
1. Integrations

The order of this documentation is

1. Settings
1. Keys
1. Members
1. Integrations
1. Packages
1. Build Jobs

Next steps: Origin Keys

## <a name="origin-keys" id="origin keys" data-magellan-target="origin-keys">Origin Keys</a>

<!-- Builder section 2: Keys

/task
  /title
  /taskbody
    /prereq
    /context
    /steps-informal
    /tutorial-info
    /tutorial-info
    /result
    /postreq
-->
Creating an origin automatically generates an origin key pair. Origin key cryptography is asymmetric: it has a public origin key that you can distribute freely, and a private origin key that you should distribute only to members of the origin. The key names follow a defined format:

<origin>-<datetime>.pub (public key)
<origin>-<datetime>.sig.key (private key, sometimes called a "signing key")

In this case, the origin is named "test-origin". The string of numbers, "20190416223046" show the date and time the key was created, in this case, 2019-04-16 22:30:46. The public key has the file extension `.pub` and the private key has `.sig.key`, since the private key is used for cryptographically signing Habitat artifacts.

The public origin key is used in different parts of the the Habitat ecosystem:

- Builder and Builder on-prem use it to verify artifacts uploaded to the origin
- Habitat signs Habitat artifacts with the private origin key when they are created
- Habitat uses the public origin key to authorize installing artifacts; Habitat only installs artifacts for which it has the public origin key
- Habitat uses the public origin key to verify the integrity of a downloaded Habitat artifact before installing it

### Create an Origin Key Pair

After finishing the basic account creation steps, you need to create your origin key pair. Habitat will use the private origin key to sign the artifacts (`.hart` files) created by building your plan and verify the integrity of your artifacts with the public origin key.

You can create an origin key pair by running `hab cli setup` from your host machine, or by running `hab origin key generate <ORIGIN>` from either the host machine or from within the studio.

Your public and private origin keys are located at `~/.hab/cache/keys` on your host machine and at `/hab/cache/keys` inside the studio environment.

### Upload Your Origin Keys

If you created a new Habitat origin from your host machine or from the Studio, Builder will not have either of the origin keys corresponding to your artifact. Builder will not accept uploaded artifacts without first having the correct origin public key.

You can upload keys for the origin through the web interface for Builder, or by using the `hab origin key upload` command. You must have the access token for authentication, as described earlier, before you can upload keys.

Origin Keys on the Command Line:

You can create an origin key pair during your initial Habitat installation by following the instructions in the `hab cli setup` interaction.
If you've already installed Habitat, you can create keys for additional origins by running `hab origin key generate <ORIGIN>`, where <ORIGIN> is the name for your new Habitat origin, from either the host machine or from within the studio.

To create origin keys from your host machine, use:

```bash
hab origin key generate <ORIGIN>
```

Your keys will be stored in `~/.hab/cache/keys` on Linux systems.

```bash
ls ~/.hab/cache/keys

test-origin-20190416223046.pub
test-origin-20190416223046.sig.key
```

## Finding Origin Keys on Builder

You can find your origin keys on the Builder site by navigating to the relevant origin and selecting the **Keys** tab.

<img src="/images/screenshots/origin-keys.png">

### Finding Origin Keys Locally

You'll find your saved private and public origin keys at `~/.hab/cache/keys` on your host(local) machine and  at `/hab/cache/keys` inside the studio environment. To see your existing origin keys from the command line, run:

```bash
ls -la ~/.hab/cache/keys
```

```PS
Get-ChildItem C:\hab\cache\keys
```

From inside of the Chef Habitat Studio, run:

```bash
ls -la /hab/cache/keys
```

```PS
Get-ChildItem C:\hab\cache\keys
```

### Download Origin Keys from Builder

To download your private or public origin key, select the download icon from the right end of the key details, under the "Actions" heading.

<img src="/images/screenshots/origin-key-download.png">

To get your public origin key from Builder from the command line, use the command:

```bash
hab origin key download <ORIGIN>
```

### Upload Origin Keys to Builder

When you create Habitat origin keys on your workstation or in the Studio with `hab origin key generate <ORIGIN>`, your origin key pairs are stored in that environment. Habitat Builder cannot access origin keys stored on your workstation or in the Studio, which means that you need to upload keys to Builder either to upload or download your Habitat origins.

At the very least, Builder requires the public origin key to verify the integrity of artifacts associated with the origin, so you'll need to upload it. Builder requires the public origin key to upload artifacts for that origin. You can also upload your private origin key to enable Builder to build new artifacts from packages whose plans are linked within the origin.

Upload origin keys through the Builder web interface, or by using the `hab origin key upload` command. Uploading origin keys uses the Habitat access token for authentication.

#### Upload Command

The simplest method for uploading your keys is to use the commands:

```bash
hab origin key upload <ORIGIN>
hab origin key upload --secret <ORIGIN>
```

To upload both origin keys at the same time, use:

```bash
hab origin key upload  --secfile <PATH_TO_PRIVATE_KEY> --pubfile <PATH_TO_PUBLIC_KEY>
```

#### Import Command

Use `hab origin key import` to read the key from a standard input stream:

```bash
hab origin key import <enter or paste key>
hab origin key import <PATH_TO_KEY>
curl <URL_THAT_RETURNS_KEY> | hab origin key import
```

On a MacOS, you may encounter an upload failure.
To remediate this failure:

 * Check that your `HAB_AUTH_TOKEN` is properly set and initialized
 * Add your `SSL_CERT_FILE` to the environment variables in your interactive shell configuration file, such as your `.bashrc`.

```bash
export SSL_CERT_FILE=/usr/local/etc/openssl/cert.pem
```

Initialize the setting from the command line with:

```bash
 source ~/.bashrc
```

---

## Origin Membership

<!-- Builder section 3: Origin Membership

/task
  /title
  /taskbody
    /prereq
    /context
    /steps-informal
    /tutorial-info
    /tutorial-info
    /result
    /postreq

1. Settings
1. Keys
1. Members
1. Integrations
1. Packages
1. Build Jobs
-->

The creator of an origin automatically owns it.

Whoever creates an origin owns it, unless
    `depart`         Departs membership from selected origin
    `help`           Prints this message or the help of the given subcommand(s)
    `info`           Displays general information about an origin
    `invitations`    Manage origin member invitations
    `key`            Commands relating to Habitat origin key maintenance
    `secret`         Commands related to secret management
    `transfer`       Transfers ownership of an origin to another member of that origin

---
## Integrations

in the case of dockerhub, its a docker hub account and password

in the case of AmazonCR its an amazon container registry, and an IAM access key and secret

Similarly, in the case of Azure CR its an azure container registry, a  service principle id, and password

<!-- Builder section 4: Integrations

/task
  /title
  /taskbody
    /prereq
    /context
    /steps-informal
    /tutorial-info
    /tutorial-info
    /result
    /postreq

1. Settings
1. Keys
1. Members
1. Integrations
1. Packages
1. Build Jobs
-->

---
<!-- Builder section 5: Packages

/task
  /title
  /taskbody
    /prereq
    /context
    /steps-informal
    /tutorial-info
    /tutorial-info
    /result
    /postreq

1. Settings
1. Keys
1. Members
1. Integrations
1. Packages
  1. Latest
  1. Versions
  1. Build Jobs
  1. Settings
    1. Package privacy settings
    1. Attach Plan files for Automated builds
1. Build Jobs
-->
## <a name="sharing-pkgs" id="sharing-pkgs" data-magellan-target="sharing-pkgs">Upload and Promote Packages</a>

While you can build and run Chef Habitat packages without sharing them on [Chef Habitat Builder](https://bldr.habitat.sh), uploading them there enables greater collaboration and automated package rebuilds as underlying dependencies or your connected GitHub repository are updated.

Prerequisites:

* Creating an account
* Get a PAT token
* Setting up `hab` to authenticate with Builder with an environment variable.
* Create an origin or join an origin that already exists.
* Provide Builder the private and public keys for that origin.
* Connecting your Github repositories and opting into rebuilds.

A Package entry has four tabs

- Latest
- Versions
- Build Jobs
- Settings

And a right panel containing the
- Build button
- Latest stable version

## Package Settings

- DEFAULT VISIBILITY
- CONNECTED Plans

## PACKAGES

When you upload a package to Builder, you are required to supply an auth token as part of the `hab pkg upload` subcommand. You can generate a Chef Habitat personal access token via the Builder site [Profile page](https://bldr.habitat.sh/#/profile) for use with the `hab` command-line utility.

### Upload Packages to Builder

As long as you are already a member of the Habitat origin, once Builder possesses at least the public origin key, then you may upload one or more artifacts to that origin with the `hab pkg upload` command. After Habitat validates the cryptographic integrity of the artifact, it is then uploaded and stored on Builder. Uploading artifacts is a privileged operation for which you must have the access token.

### Promote Packages

<%= partial "/partials/global/channel-overview" %>

By default, newly uploaded packages are placed in the `unstable` channel. However, the default package that is downloaded is the latest `stable` version of a package, unless overridden in commands such as `hab sup run`, `hab svc load`, and `hab pkg install`. If you want to promote your package to the `stable` channel, run the `hab pkg promote` command as follows:

```bash
$ hab pkg promote -z <TOKEN> origin/package/version/release stable
```

> **Note** You can also promote packages to the `stable` channel using the *promote to stable* button in the web app.

For more information on how to use channels, see [Continuous Deployment Using Channels](/docs/using-habitat/#continuous-deployment).

### Download Packages

> **Note:** When running private packages from Builder, it's necessary to add your [Chef Habitat access token](/docs/using-builder/#builder-token) to the machine where you intend to deploy the package, via `export HAB_AUTH_TOKEN=<token>`.

You can instruct the Supervisor to download and run packages from Builder by using the `hab sup` and `hab svc` commands, for example:

```bash
$ hab sup run
$ hab svc load core/postgresql
```

If the Supervisor does not have the `core/postgresql` package in its local cache, it will contact Builder, retrieve the latest version and the public key for the `core` origin, verify the cryptographic integrity of the package, and then start it.

You may also supply a `--channel` argument to instruct the Supervisor to use a different channel for the purposes of continuous deployment:

```bash
$ hab svc load core/postgresql --channel unstable
```

### Running Packages from Exported Tarballs

An exported tarball package contains the Chef Habitat client/binary as well as dependencies specified by your artifact.

After deploying the tarball to your target server, extract the contents to the root filesystem (`/`):

```bash
$ tar zxf core-nginx-1.11.10-20170616000025.tar.gz --directory /
```

You can instruct the Supervisor to run packages from an exported tarball:

```bash
$ /hab/bin/hab svc start core/nginx
```

Note: On a clean server, this will download additional packages to satisfy the Supervisor dependencies. You will also require a `hab` group and `hab` user on the system for most services.

---

## Build Jobs

<!-- Builder section 6: Packages

/task
  /title
  /taskbody
    /prereq
    /context
    /steps-informal
    /tutorial-info
    /tutorial-info
    /result
    /postreq

1. Settings
1. Keys
1. Members
1. Integrations
1. Packages
1. Build Jobs
-->
What is a build job?
Prerequisites


## Package Settings

- Default Visibility
- Connect a plan
- Connect multiple plans


### Connect a Plan

By connecting a plan file in <a href="https://bldr.habitat.sh/#/sign-in" class="link-external" target="_blank">Chef Habitat Builder</a>, you can trigger both manual (via the web UI, or via the `hab` command line) as well as automated package rebuilds whenever a change is merged into the `master` branch of the repository containing your Chef Habitat plan, or when a dependent package updates (rebuilds).

To connect a plan to Builder, view one of your origins (while signed in), select **Connect a plan file** and complete the following steps:

  - Select the plan's operating system
  - Choose the GitHub organization and repository containing your Chef Habitat plan
  - Enter the path to your plan file
  - Review the privacy setting for the package
  - Specify container registry publishing settings (optional, default is none)
  - Specify automatic dependency rebuild option (default is off)
  - Select **Save the Connection**

You can connect plans for more than one operating system [architecture?] in Builder, which supports for Linux, Linux Kernel 2, and Windows systems.

#### Container registry publishing settings

Toggle the switch to the on positions reveals and select from the of enabled registries. See the origin Integrations tab for more information on enabling registries.

#### Automatic Dependency Rebuild

The auto-build option controls whether or not your package will get automatically re-built. This option is a useful capability to have - for example, if you have a demo app that doesn’t need to be kept constantly up to date when some underlying dependency updates. Auto-build encompasses both builds that are triggered by Github web hooks (on commits to master), as well as builds that are triggered by a dependency updating.

By default, new plan connections will have auto-build turned off.

### <a name="multiple-plans-builder" id="multiple-plans-builder" data-magellan-target="multiple-plans-builder">Building Plans with Multiple Components</a>
<%# Move this section to Plans %>
If you have a GitHub repository with multiple components inside, you will most likely also have individual plans for those components that are located inside of component subfolders. By default, Builder will only look for a package plan in either the root of the repository, or in a `habitat` subfolder at the root. If it does not find a plan file in those locations, it will not automatically issue builds when it detects file changes in the repository.

In order to tell Builder about the location of the individual plan files, and in order provide more fine-grained control over when component packages are built, you can programmatically customize how and when Builder will build your plans by specifying build behavior in a `.bldr.toml` file at the root of the repository that you connect to Builder.

Using this file, Builder only builds packages when source files or directories are updated in paths specified in `.bldr.toml`. This allows you to configure the building, publishing, and post-processing phases of a plan build in Builder.

To enable this functionality, do the following:

1. Create a `.bldr.toml` in the root of your repository.

2. Open it and add an entry for each component package that you want to build.

    The `.bldr.toml` file is in TOML format, so create a TOML table specifying the `$pkg_name` value for that plan and then add a `plan_path` field specifying the path to your `plan.sh` file (you do not need to include plan.sh explicitly in the path). If all the files related to the plan are under the plan path, then you are done. Otherwise, you will need an additional 'paths' field specifying Unix-style path globs to files that are associated with the plan you specified in the 'plan_path'. File or directory changes made in these path locations determine which packages will be rebuilt. Basically, when a file is committed, Builder will check to see whether it falls underneath the `plan_path` hierarchy, or matches one of the globs in the `paths` field if it was specified - if the answer is yes, then Builder will issue a build for that commit.

    It's important to note that the entries for `plan_path` and `paths` do not behave the same. If you have something like `plan_path = "habitat"`, that behaves as if you had written `plan_path = "habitat/*"` - that is, it will automatically check every file under the `habitat` directory. However, if you have something like `paths = [ "src" ]`, that is _not_ automatically expanded to `src/*`. That line will only watch for changes to a file called `src`. If you're wanting to watch for changes to any file inside the `src` directory, then you must explicitly specify the glob, like so: `paths = [ "src/*" ]`.

    For example, in the Chef Habitat repository itself, this TOML states that the `hab-launcher`, `hab-studio`, and `hab-sup` packages will be rebuilt if there are any changes in any of the specified `components` sub-directories. Note that `hab-studio` does not need to specify a `path` because all of it's files are within the `plan_path` hierarchy, but that is not the case for the other projects.

    ```toml
    # .bldr.toml
    [hab-launcher]
    plan_path = "components/launcher/habitat"
    paths = [
      "components/launcher/*",
      "components/launcher-protocol/*",
      "support/ci/builder-base-plan.sh",
    ]

    [hab-studio]
    plan_path = "components/studio"

    [hab-sup]
    plan_path = "components/sup"
    paths = [
      "components/sup/*",
      "components/eventsrv-client/*",
      "components/launcher-client/*",
      "components/butterfly/*",
      "components/core/*",
      "components/builder-depot-client/*",
    ]
    ```

    Notice that in order to specify that we're interested in all files inside of the directories in our `paths` entries, we had to add the `/*` glob to the end manually.

    It's also worth pointing out that there are multiple wildcard characters you can use when specifying path components.

* `?` will match any single character.
* `*` will match any (possibly empty) sequence of characters
* `**` matches the current directory and arbitrary subdirectories. This sequence must form a single path component, so both `**a` and `b**` are invalid. More than two consecutive `*` characters is also invalid.
* `[...]` matches any character inside the brackets. You can also specify a range, such as `[0-9]` to match any digit or `[a-z]` to match any lowercase letter.
* `[!...]` is the negation of `[...]` so it will match any character *not* in the brackets.

    Note that while the above set of rules bears a remarkable resemblance to regular expressions, we do not support full regular expression syntax. Only what's shown here is supported. Here is an example.

    ```toml
    # .bldr.toml
    [hab-sup]
    plan_path = "components/sup"          # automatically checks every file inside the 'sup' directory
    paths = [
      "components/sup/?",                 # matches any file with a single character file name inside the 'sup' directory
      "components/eventsrv-client/*",     # matches any file inside the 'eventsrv-client' directory
      "components/launcher-client/**/*",  # matches any file inside the 'launcher-client' directory and also any of its sub-directories
      "components/butterfly/[0-9]*"       # matches any file inside the 'butterfly' directory that begins with a number
    ]
    ```
---
## <a name="package-search" id="package-search" data-magellan-target="package-search">Search for Packages</a>

section: Search Packages
  explain: search works on the origin and package level.
  explain: Once you're on the package, clicking the origin sends you to the package list for that origin. You cannot get to an origin list from search
  explain: that this search is stupid
  explain: Does not accept wild cards
  explain: using `/` breaks search *unless* it is the middle (exact string match). Likewise, leaving it out `core ruby` returns nothing.
  explain: `ruby` is completely different from `ruby26`

---
## <a name="on-prem" id="on-prem" data-magellan-target="on-prem">Install and Use Builder On-Premises</a>

In addition to our hosted service, we also support installing and running a Chef Habitat Builder on-premises on your own network and infrastructure, which allows you to choose from a wider selection of authentication providers and to manage how Builder fits into your existing CI/CD processes.

Currently, Builder on-prem stores packages for download and upload by Supervisors and Studios.

For a detailed explanation of features, requirements and setup instructions, [see the GitHub repository](https://github.com/habitat-sh/on-prem-builder).

---
## <a name="using-custom-certs" id="using-custom-certs" data-magellan-target="using-custom-certs">Using Custom Certificates</a>

Many enterprise environments use custom certificates (for example, self-signed). For example, an on-premises Chef Habitat Builder Depot might have a self-signed SSL certificate.

Attempting to perform an operation using the Habitat client to communicate with a service that has a custom certificate can produce an error, such as:
```
✗✗✗
✗✗✗ the handshake failed: The OpenSSL library reported an error: error:14090086:SSL routines:ssl3_get_server_certificate:certificate verify failed:s3_clnt.c:1269:: unable to get local issuer certificate
✗✗✗
```

One option to remediate this error is to define a `SSL_CERT_FILE` environment variable pointing to the custom certificate path before performing the client operation.

The Habitat 0.85.0 release in September 2019 improved the handling of custom certificates.  Now Habitat knows to look for custom certificates in the `~/.hab/cache/ssl` directory, which is `/hab/cache/ssl` when you are running as root. Copying multiple certificates--for example, a self-signed certificate and a custom certificate authority certificate--to the Chef Habitat cache directory makes them automatically available to the Habitat client.

The `/hab/cache/ssl` directory is also available inside a Habitat Studio. As long as the certificates are inside the cache directory before you enter the Studio, you'll also find them inside the Studio. In addition, if you've set the `SSL_CERT_FILE` environment variable, you'll also find both it and the file that it points to inside the Studio`/hab/cache/ssl` directory.

Note: The `cert.pem` file name is reserved for Habitat. Do not use `cert.pem` as a file name when copying certs into the cache directory.
