---
title: Chef Habitat Builder
description: Uploading, building, and deploying application packages with Chef Habitat Builder
---
# <a name="using-builder" id="using-builder" data-magellan-target="using-builder"> Chef Habitat Builder</a>

Chef Habitat Builder acts as the core of Chefâ€™s Application Delivery Enterprise hub. Chef Habitat Builder was first launched as a cloud service and as the repository of all available plan templates built by Chef and the supporting community. Due to the fact that the application source code is stored alongside the build package many users expressed a preference for storing packages and running the Builder on-premises. As a result, Chef Habitat Builder can be consumed either as a cloud based or on-premises solution. Plan files are stored in the SaaS version where they can be viewed and accessed by the Chef Habitat community and then shared to the on-premises version of the builder where they can then be copied and maintained locally.

## Chef Habitat Builder Enterprise Components Include:

* **Application Manifest** - The Application Manifest provides a single application directory which includes at a minimum the compiled app artifact, dynamic links to all direct & transitive runtime dependencies and instructions to install and run the app.
* **Deployment Channel Management** -  Pre-canned deployment channels that can be used as-is or a user can custom design their own channels. Apps that are deployed through Chef Habitat can subscribe to a channel and be auto-upgraded whenever the app is promoted.
* **Origin Management** - origin stuff
* **Content Library** - Hundreds of pre-built [application delivery packages](https://bldr.habitat.sh/#/pkgs/core) and core dependencies, which makes it easy to get started with Chef Habitat.
* **Custom Data and Reporting APIs** - Rich APIs enable the capability to export to CSV or JSON.
* **DevOps Integration APIs** - it provides an API so that clients can find and download the necessary packages to run their applications. Additional APIs also enable easy integration with other popular DevOps tools including Jenkins, Terraform, Artifactory, Hashi Vault and many others.
* **Role Based User Access** -
* **Container Registry Support** -

The Chef Habitat SaaS builder offers additional functionality including Automated Builds,

For more information on how the SaaS and On-Prem versions of Chef Habitat Builder work together read the blog - [Builder On-Prem Enhancements that Extend Support to Airgap Environments and Simplify Set-Up](https://blog.chef.io/chef-habitat-product-announcement-builder-on-prem-enhancements-that-extend-support-to-airgap-environments-and-simplify-set-up/)

## Compare Chef Habitat Builder and Builder on-prem

| Feature | Builder on-prem | Builder SaaS |
|---------|-----------------|------------- |
|Application Manifest| Yes | Yes |
|Deployment Channel Management| Yes | Yes |
|Origin Management| Yes | Yes |
|Content Library| Yes | Yes |
|Custom Data and Reporting APIs| Yes | Yes |
|DevOps Integration APIs| Yes | Yes |
|Role Based User Access| Yes | Yes |
|Container Registry Support| No | Yes |

## <a name="builder-start" id="builder-start" data-magellan-target="builder-start">Get Started</a>

Whether you are looking to leverage the SaaS or on-prem version of Chef Habitat Builder you will need to create an account on the SaaS version of Builder of Chef Habitat. After you have then downloaded the version you will then sync the two accounts.

This documentation covers everything from creating an account to setting up automated builds and exporting packages to a variety of container registries.


---
## <a name="builder-account" id="builder-account" data-magellan-target="builder-account">Get a Builder Account</a>

### Prerequisites

You need to set a few things up before you can get started with Chef Habitat Builder:

* Download and install the [Chef Habitat CLI](https://www.habitat.sh/docs/install-habitat/#install-habitat)
* A [GitHub account](https://github.com/join)

### Sign-in and Authorize Chef Habitat Builder

Signing in to Chef Habitat Builder automatically creates your account, but you will also need to authorize the Chef Habitat Builder application in Github.

Head over to the Chef Habitat Builder sign-in page at [https://bldr.habitat.sh/#/sign-in](https://bldr.habitat.sh/#/sign-in) to get started.


1. To sign in with an existing GitHub account, select **Sign in with GitHub**
1. If you need to set up a GitHub account, select the **Sign up here** link

![Chef Habitat sign in with Github](/images/screenshots/builder_signin.png)

You also need to set up the Chef Habitat Builder application to use GitHub's authorization process the first time you sign in with GitHub. Once you have authorized Chef Habitat and signed in, you'll arrive at the 'My Origins' view.

![Authorize the Chef Habitat Application](/images/screenshots/authorize.png)
---
## <a name="builder-profile" id="builder-profile" data-magellan-target="builder-profile">Setup a Profile</a>

Use the Builder Profile to:

* See the GitHub account used to sign-in to Builder
* Add an email to your profile (optional)
* Create your personal access token

Access your Builder profile by selecting the **round icon at the top right corner** of the Builder page. Select the **profiles** option from the drop-down menu to  customize your profile and create your personal access token.

![Access your Chef Habitat Builder profile](/images/screenshots/builder_profile.png)

### Register an Email Address

Adding an email address to your Chef Habitat Builder profile account gives us permission to contact you directly about important information. If you use an email address associated with a GitHub account, it will also use your GitHub avatar on Builder. Save your changes by selecting `save`.

![Register your email address](/images/screenshots/builder_profile_user.png)

### <a name="builder-token" id="builder-token" data-magellan-target="builder-token">Create a Personal Access Token </a>

You need a _personal access token_ to authenticate interactions between your local environment and Chef Habitat Builder, such as uploading your artifacts to Builder, or checking the status of your build jobs

Create your personal access token at the bottom of the profile page (below the save button), by selecting **Generate Token**.

![Create your personal access token](/images/screenshots/generate-token.png)

Your generated access token will appear in the field. Make a copy of your access token by selecting the icon on the right side of the field. You can only see an access token immediately after it is generated. Copy and save your access token in a safe location or set it as an environment variable before your navigate away from your builder profile.

![Copy your personal access token](/images/screenshots/copy-token.png)

You can use your personal access token as a [Windows environment variable](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_variables?view=powershell-7) for a single session by passing it in the command line or save it in your user settings for use across sessions.

Save your Habitat authorization token as a permanent environment variable in Windows using:

```PS
SETX HAB_AUTH_TOKEN <token> /m
```

Replacing <token> with the contents of your generated token.

You can also save your Habitat authorization token as a permanent environment variable using the Windows user interface. In your Windows help bar, enter `environment` and select `Edit the system environment variables` from the list of suggestions.

This opens the `System Properties` window on the `Advanced` tab. Select the `Environment Variables` button.

![Navigate to Windows Environment Variables](/images/screenshots/environment_variable.png)

In the next window, select the `New` button in the top part. This opens a dialog box that lets you set individual user variables.

![Make new user variable](/images/screenshots/environment_variable_new.png)

Create a permanent environment variable by entering `HAB_AUTH_TOKEN` as the variable name. Next, paste the authorization token that you copied after you generated a new token on your Habitat profile page as the variable value. After you select the `OK`, you will see the new token in the user variables field.

![Save your HAB_AUTH_TOKEN](/images/screenshots/environment_variable_new_var.png)

To test that your new token works correctly, open the Command Prompt---which you can find by entering command in the Windows search box---and entering `echo %HAB_AUTH_TOKEN%`. You should see the value that you pasted into the environment variable.

####  <a name="builder-token-macos" id="builder-token-macos" data-magellan-target="builder-token-macos">Set the personal access token as a MacOS Environment Variable</a>

Set the `HAB_AUTH_TOKEN` in the CLI with:

```bash
export HAB_AUTH_TOKEN=<token>
```

Replacing `<token>` with the contents of your generated personal access token.

To use your personal access token across sessions, set it as an environment variable in your interactive shell configuration file, such as your `.bashrc`.

```bash
export HAB_AUTH_TOKEN=<token>
```

Then initialize the path from the command line, by running:

```bash
source ~/.bashrc
```

---
## <a name="builder-origin" id="builder-origin" data-magellan-target="builder-origin">Create an Origin</a>

An origin is the space within Builder that you'll use for storing and sharing packages. It is a unique namespace within Builder, and while you can delete or transfer an origin, you rename an origin after you created it. One example of an origin is the `core` origin in Chef Habitat Builder, which is the namespace for the foundational packages maintained by the Chef Habitat team.

![Builder without origins](/images/screenshots/create-origin.png)

To create an origin, select the **Create origin** button on the _My Origins_ page in the Chef Habitat Builder web app, which opens the _Create New Origin_ form. (Builder > My Origins > Create Origin)

![Creating an origin](/images/screenshots/create-origin-form.png)

First, enter a unique name that you want to associate with a given set of packages. Some examples that you'll see in Chef Habitat Builder are team names, user names, and abstract concepts, such as the "core" origin, which is the set of foundational packages managed and versioned by the core Chef Habitat maintainers.

Next, choose a privacy setting. This is the default privacy setting for new packages. You can override this setting when uploading individual packages from the CLI or by connecting a plan file that declares a package as private. The difference between public and private is:

  - Anyone can find and use public packages
  - Only origin members can find and use private packages

When you select **Save and Continue**, Chef Habitat Builder:

1. Creates your origin
1. Creates an origin key pair
1. Redirects Chef Habitat Builder to the origin page

![Origin successfully created](/images/screenshots/create-origin-done.png)

### Create an Origin with the Chef Habitat CLI

Use the [hab origin](../habitat-cli/#hab-origin) commands to manage your origins from the command line.

Create an origin from the command line with the [hab origin create](/docs/habitat-cli/#hab-origin-create/) command

```
hab origin create <origin>
```

The results of this command differ slightly from creating an origin on the Chef Habitat Builder site. The CLI command:

1. Creates an origin on the Chef Habitat Builder site
1. Does not generate an origin key pair

For more information, see the [`hab origin create`](/docs/habitat-cli/#hab-origin-create) CLI documentation.

---
## <a name="origin-keys" id="origin keys" data-magellan-target="origin-keys">Origin Keys</a>

Prerequisites:

* [Download the Chef Habitat CLI](/docs/install-habitat)
* [Create a Chef Habitat Builder account](/#builder-account)
* [Generate a personal access token](/#builder-token)
* [Create an origin with `hab origin create`](/#create-origin)

When you create an origin, Chef Habitat Builder automatically generates _origin keys_, which is an asymmetric cryptographic key pair that is used to authenticate artifacts.

Each time you interact with an artifact, Chef Habitat uses origin keys:

* When you upload an artifact to Chef Habitat Builder or Builder on-prem, Chef Habitat verifies the artifact with the key pair
* When you build an artifact, Chef Habitat BUilder signs it with the private origin key
* When you install an artifact on a Supervisor, Chef Habitat uses the public origin key to authorize the artifact's installation; Chef Habitat only installs artifacts for which it has the public origin key
* When you download an artifact to your local environment, Chef Habitat uses the public origin key to verify the artifact's integrity before it starts the installation

Origin key cryptography is asymmetric: it has a public origin key that you can distribute freely, and a private origin key that you should distribute only to members of the origin. The key names follow a defined format:

```hab
<origin>-<datetime>.pub (public key)
<origin>-<datetime>.sig.key (private key, also called a "signing key")
```

For example, in:

```hab
testorigin-20190416223046.pub
testorigin-20190416223046.sig.key
```

* "testorigin" is the origin's name
* "20190416223046" is the date and time of the key's creation, which was 2019-04-16 22:30:46.
* `.pub` is the file extension for the public key
* `.sig.key` is the file extension for the private key, which is also called a "signing key"

### <a name="key-tab" id="key-tab" data-magellan-target="key-tab"> The Keys Tab </a>

When you create an origin, Chef Habitat Builder automatically generates an origin key pair and saves both keys. To view your origin keys on Chef Habitat Builder, navigate to your origin and select the **Keys** tab. (Builder > Origins > Keys)

![Viewing your origin keys](/images/screenshots/origin-keys.png)

#### Download Origin Keys from Builder

Download your private or public origin key by selecting the **download** icon from the right end of the key details, under the _Actions_ heading.

![Detail of the download icon](/images/screenshots/origin-key-download.png)

#### Upload Origin Keys to Builder

You can upload origin keys that you generate on the command line to Chef Habitat Builder by selecting either the **Upload a private key** or **Upload a public key** icon, and copy your key into the form that appears.

![Example form content for uploading an origin key in Builder](/images/screenshots/builder-key-upload.png)

### <a name="key-cli" id="key-cli" data-magellan-target="key-cli"> Managing Origin Keys with the CLI </a>

Run Chef Habitat CLI commands from your local environment or from within the Chef Habitat Studio.

See the CLI documentation for more information on the [`hab origin key`](/docs/habitat-cli/#hab-origin-key) commands.

#### Find Your Local Origin Keys

Chef Habitat stores your public and private origin keys at `~/.hab/cache/keys` on Linux systems, `C:\hab\cache\keys` on Windows, and at `/hab/cache/keys` inside of the Chef Habitat Studio environment.

##### To find your existing origin keys in your local environment:

On Windows:

```PowerShell
Get-ChildItem C:\hab\cache\keys
```

On Linux or MacOS:

```bash
ls -la ~/.hab/cache/keys
```

##### To find your existing origin keys from inside of the Chef Habitat Studio:

On Windows:

```powershell
Get-ChildItem C:\hab\cache\keys
```

On Linux or MacOS:

```bash
ls -la /hab/cache/keys
```

#### Generate Origin Keys with the CLI

When you create an origin through the site, Chef Habitat Builder automatically generates an origin key pair.

The Chef Habitat CLI creates origin key pairs through two different commands, for two different uses:

* Use [`hab setup`](/docs/install-habitat) to generate your first origin key pair as part of setting up the `hab` CLI
* Use the `hab origin key generate <ORIGIN>` command to create an key pair for an origin created with the `hab origin create` command

Create origin keys with the `hab` command:

```hab
hab origin key generate <ORIGIN>
```

#### Download Origin Keys with the CLI

To get your public origin key from Builder from the command line, use the command:

```hab
hab origin key download <ORIGIN>
```

#### Upload Origin Keys with the CLI

Creating an origin with the `hab origin create` command registers the origin on Chef Habitat Builder without creating an origin key pair. The `hab origin key generate` command creates the key pair and saves them in your local environment, but it does not upload either origin key to Chef Habitat Builder.

* Builder requires the public origin key to upload artifacts for that origin, so you'll need to upload it.
* Builder requires the private origin key to enable new artifact builds from packages with plans linked to that origin.

Upload origin keys with the `hab` command:

```hab
hab origin key upload <ORIGIN>
```

Upload the origin private key:

```hab
hab origin key upload --secret <ORIGIN>
```

Upload both origin keys at the same time:

```hab
hab origin key upload  --secfile <PATH_TO_PRIVATE_KEY> --pubfile <PATH_TO_PUBLIC_KEY>
```

#### Import Origin Keys with the CLI

Use `hab origin key import` to read the key from a standard input stream into Chef Habitat Builder:

```hab
hab origin key import <enter or paste key>
hab origin key import <PATH_TO_KEY>
curl <URL_THAT_RETURNS_KEY> | hab origin key import
```

##### Troubleshoot Origin Key Import

On a MacOS, you may encounter an upload failure.
To remediate this failure:

 * Check that your `HAB_AUTH_TOKEN` is properly set and initialized
 * Add your `SSL_CERT_FILE` to the environment variables in your interactive shell configuration file, such as your `.bashrc`.


```bash
  export SSL_CERT_FILE=/usr/local/etc/openssl/cert.pem
```

Initialize the setting from the command line with:

```bash
 source ~/.bashrc
```

---
## <a name="origin-settings" id="origin-settings" data-magellan-target="origin-settings">Origin Settings</a>

The _Origin Settings_ tab contains:

* Default Package Settings
* Origin Secrets

![The origin settings tab with a public default package setting and a saved origin secret](/images/screenshots/origin-secrets.png)

### <a name="package-settings" id="package-settings" data-magellan-target="package-settings">Default Package Settings</a>

The _Default Package Settings_ define the visibility of build artifacts (.hart files).

* Public packages are visible in search results and can be used by every Chef Habitat Builder user
* Private artifacts do not appear in search results and are available only to origin members

Change the default setting for the origin by switching from **Public artifacts** to **Private artifact**. The default setting required for each origin and users with more than one origin can set some as public and others as private. Packages can have different default visibility settings than their origin's. Change the default visibility setting in for individual packages in that package's setting tab (Builder > Origin > Package > Settings).

### <a name="origin-secrets" id="origin-secrets" data-magellan-target="origin-secrets">Origin Secrets</a>

Origin secrets, located on the bottom of the _Settings_ tab (Builder > Origin > Settings > "Origin Secrets") let you encrypt and store secrets as environment variables. Origin secrets are useful for plans that require access to protected resources at build time, such as private source-code repositories and cloud storage providers.

Origin secrets are retained by the origin and are available for any of that origin's packages. The origin secrets in your local environment are encrypted with an origin encryption key. Only Chef Habitat Builder can read encrypted origin secrets.

#### Manage Origin Secrets with the Chef Habitat CLI

You can view the list of origin secrets and delete them in Chef Habitat Builder.
However, the primary way of interacting with origin secrets is with the Chef Habitat CLI.

Prerequisites:

* [Download the Chef Habitat CLI](/docs/install-habitat)
* [Create a Chef Habitat Builder account](/#builder-account)
* [Generate a personal access token](/#builder-token)
* [Create an origin](/#create-origin)
* [Get origin keys](/#origin-keys)

##### List Secrets

To list all of the secrets in an origin, use:

```hab
hab origin secret list --origin <ORIGIN>
```

##### Set Origin Secrets as Environment Variables

Add your origin secrets as environment variables in your local environment:

```bash
export HAB_ORIGIN=<ORIGIN>
export HAB_AUTH_TOKEN=<TOKEN>
hab origin secret list
```

##### Save an Origin Secret

To save an origin secret give the secret a name and the key value:

```hab
hab origin secret upload AWS_ACCESS_KEY_ID <your-key-id>
hab origin secret upload AWS_SECRET_ACCESS_KEY <your-secret-access-key>
```

The output should similar to:

```bash
$ hab origin secret upload AWS_ACCESS_KEY_ID 1234567890EXAMPLE
â†“ Downloading latest public encryption key
    79 B / 79 B | [========================================] 100.00 % 120.23 KB/s
â˜‘ Cached habicat-20200123456789.pub
â˜› Encrypting value for key AWS_ACCESS_KEY_ID.
âœ“ Encrypted AWS_ACCESS_KEY_ID=[REDACTED].
â†‘ Uploading secret for key AWS_ACCESS_KEY_ID.
âœ“ Uploaded secret for AWS_ACCESS_KEY_ID.
```

##### Delete an Origin Secret

To delete an origin secret from an origin with the CLI

```hab
hab origin secret delete AWS_ACCESS_KEY_ID
hab origin secret delete AWS_SECRET_ACCESS_KEY
```

See [Using Origin Secrets in Plans](/docs/developing-packages/#buildtime-workflow) for guidance on using origin secrets.

See the [`hab origin secret`](/docs/habitat-cli/#hab-origin-secret) CLI documentation for more information on these commands.

---
## <a name="origin-members" id="origin-members" data-magellan-target="origin-members">Origin Membership</a>

Prerequisites:

* [Download the Chef Habitat CLI](/docs/install-habitat)
* [Create a Chef Habitat Builder account](/#builder-account)
* [Generate a personal access token](/#builder-token)
* [Create an origin](/#create-origin)
* [Get origin keys](/#origin-keys)

### Role-Based Access Control (RBAC) for Chef Habitat Builder (SaaS and on-prem)

TODO:New in: SEMVER

RBAC provides your organization with better operational safety by letting you assign specific levels of access to each origin member. With RBAC in place, existing standard origin members from earlier versions are assigned the `Maintainer` role. This role has similar permissions of the previous generic member role and the areas of difference are are detailed below. The origin owner role remains unchanged.

RBAC Origin Member Roles:

* Read-Only: This user can read an origin's packages, channels, members, jobs, keys, integrations, invitations, roles, settings but cannot add to, change, or delete anything else in the origin, including uploading packages and inviting members. Read-Only is the default membership role for all new origin members.
* Member: In addition to Read-Only access, an origin Member can upload and build packages in the 'unstable' channel, but they cannot promote packages to other channels.
* Maintainer: Current origin members are now 'Maintainers'. This role has full read and write access to packages, channels, members, jobs, integrations, invitations, settings. However, the Maintainer role is more limited than the past role, in that Maintainers only have read access to packages, channels, members, jobs, keys, integrations, and settings. Origin Maintainers can read origin member roles and see and send invitations to new members, but they cannot otherwise change origin membership--their own or anybody else's. Finally, Maintainers can neither read nor write origin secrets.
* Administrator: In addition to Maintainer access, the Administrator role adds the missing privileges for writing origin keys and member roles, as well as for reading and writing origin secrets. Administrators have full read and write access to packages, channels, members, jobs, keys, integrations, invitations, roles, secrets, settings.
* Owner: As in the past, the origin Owner has full read and write access to the origin. Only Owners can delete the origin or transfer ownership to another member.

### Comparison of RBAC Member Roles and Actions

| Action | Read-Only | Member | Maintainer | Administrator | Owner |
|---------|-------|-------|-------|-------|-------|
| **Packages** |
| View packages | Y | Y | Y | Y | Y |
| Upload packages to `unstable` | N | Y | Y | Y | Y |
| Promote packages from `unstable` | N | N | Y | Y | Y |
| **Build Jobs** |
| View build jobs | Y | Y | Y | Y | Y |
| Trigger `unstable` build job | N | Y | Y | Y | Y |
| **Channels** |
| View channels | Y | Y | Y | Y | Y |
| Add/Update/Delete channels | N | N | Y | Y | Y |
| **Origin Keys** |
| View keys | Y | Y | Y | Y | Y |
| Add/Update/Delete keys | N | N | N | Y | Y |
| **Origin Membership** |
| View members | Y | Y | Y | Y | Y |
| View invitations | Y | Y | Y | Y | Y |
| Send Invitations | N | N | Y | Y | Y |
| Revoke Invitations | N | N | Y | Y | Y |
| **Member Roles** |
| View member roles | Y | Y | Y | Y | Y |
| Update member roles | N | N | N | Y | Y |
| **Origin Settings** |
| View settings | Y | Y | Y | Y | Y |
| Add/Update/Delete settings | N | N | N | Y | Y |
| **Origin Secrets** |
| View secrets | N | N | N | Y | Y |
| Add/Update/Delete secrets | N | N | N | Y | Y |
| **Cloud Integrations** |
| View integrations | Y | Y | Y | Y | Y |
| Add/Update/Delete integrations | N | N | Y | Y | Y |
| **Ownership** |
| Transfer Origin | N | N | N | N | Y |
| Delete Origin | N | N | N | N | Y |

### Manage Origin Members in Builder

TODO: Update images of Builder & description of actions that I can take in the UI


In tandem with the changes to the Builder membership roles, we've also updated the `hab` CLI to support RBAC. We're working on adding role management to the Chef Habitat Builder site, but in the meantime, you'll need to use the CLI for now.

![Manage origin members](../images/screenshots/origin_members.png)

### Manage Origin Membership with `hab origin invitations`

Manage Chef Habitat Builder origin membership with the Chef Habitat CLI, using the [hab origin invitations](/docs/habitat-cli/#hab-origin-invitations) command.

All Chef Habitat Builder users can accept, ignore, and see invitations for their accounts.

View origin invitations:

```bash
hab origin invitations list
```

Accept origin invitations:

```bash
hab origin invitations accept <ORIGIN> <INVITATION_ID>
```

Ignore origin invitations:

```bash
hab origin invitations ignore <ORIGIN> <INVITATION_ID>
```

All origin members can send origin membership invitations:

```bash
hab origin invitations send <ORIGIN> <INVITEE_ACCOUNT>
```

Origin owners can see all pending origin membership invitations:

```bash
hab origin invitations pending <ORIGIN>
```

Origin owners can rescind an origin membership invitation:


```bash
hab origin invitations rescind <ORIGIN> <INVITATION_ID>
```

Origin owners can transfer origin ownership to another member:

```bash
hab origin transfer [OPTIONS] <ORIGIN> <NEW_OWNER_ACCOUNT>
```

### Manage Member Roles with `hab rbac`

You can use role based access control (RBAC) from the command line.
An origin `MEMBER_ACCOUNT` is the name used to signin to Chef Habitat builder. You can find the list of user names on an origin's _Members Tab_. (Builder > Origin > Members)

The RBAC command syntax is:

```bash
hab origin rbac <SUBCOMMAND>
```

The syntax for the `show` subcommand is:

```bash
hab origin rbac show <MEMBER_ACCOUNT> --origin <ORIGIN>
```

See an origin member's RBAC role:

```
hab origin rbac show bluewhale --origin two-tier-app
```

The syntax for the `set` subcommand is:

```bash
hab origin rbac set [FLAGS] [OPTIONS] <MEMBER_ACCOUNT> <ROLE> --origin <ORIGIN>
```

Set a member's RBAC role with:

```bash
hab origin rbac set bluewhale admin --origin two-tier-app
```

---
## <a name="sharing-pkgs" id="sharing-pkgs" data-magellan-target="sharing-pkgs">Upload and Promote Packages</a>

While you can build and run Chef Habitat packages without sharing them on [Chef Habitat Builder](https://bldr.habitat.sh), uploading them there enables greater collaboration and automated package rebuilds as underlying dependencies or your connected GitHub repository are updated.

> Note: Chef Habitat Builder can only build Linux based plans (`plan.sh`) at this time.

Setting up Chef Habitat Builder is easily done on the website: these steps take you through connecting your local Studio development experience with Builder.

You interact with Chef Habitat Builder by:

* Creating an account.
* Creating an origin, or being invited to join an origin that already exists.
* Setting up `hab` to authenticate with Builder.
* Uploading the private and public keys for that origin.
* Connecting your Github repositories and opting into rebuilds.

Chef Habitat Builder supports both public and private origins, packages, and Github repositories.

### Create a Builder Account

If you haven't created an account yet, see the [Create a Builder Account](/docs/using-builder/#builder-account) section above.

### Create or Join an Existing Origin

You can create your own origin in Builder or be invited to join an existing one. If you already built some Chef Habitat packages on your local computer prior to signing up for an account, you must rename your local packages' `pkg_origin` if the origin you want already exists.

### Set up Chef Habitat to Authenticate to Builder

When you upload a package to Builder, you are required to supply an auth token as part of the `hab pkg upload` subcommand. You can generate a Chef Habitat personal access token via the Builder site [Profile page](https://bldr.habitat.sh/#/profile) for use with the `hab` command-line utility.

Once you have this token, you can set the `HAB_AUTH_TOKEN` [environment variable](/docs/reference#environment-variables) to this value, so that any commands requiring authentication will use it.

### Create an Origin Key Pair

After finishing the basic account creation steps, you need to create your origin key pair. Habitat will use the private origin key to sign the artifacts (`.hart` files) created by building your plan and verify the integrity of your artifacts with the public origin key.

You can create an origin key pair by running `hab cli setup` from your host machine, or by running `hab origin key generate <ORIGIN>` from either the host machine or from within the studio.

Your public and private origin keys are located at `~/.hab/cache/keys` on your host machine and at `/hab/cache/keys` inside the studio environment.

### Upload Your Origin Keys

If you created a new Habitat origin from your host machine or from the Studio, Builder will not have either of the origin keys corresponding to your artifact. Builder will not accept uploaded artifacts without first having the correct origin public key.

You can upload keys for the origin through the web interface for Builder, or by using the `hab origin key upload` command. You must have the access token for authentication, as described earlier, before you can upload keys.

### Upload Packages to Builder

As long as you are already a member of the Habitat origin, once Builder possesses at least the public origin key, then you may upload one or more artifacts to that origin with the `hab pkg upload` command. After Habitat validates the cryptographic integrity of the artifact, it is then uploaded and stored on Builder. Uploading artifacts is a privileged operation for which you must have the access token.

### Promote Packages

<%= partial "/partials/global/channel-overview" %>

By default, newly uploaded packages are placed in the `unstable` channel. However, the default package that is downloaded is the latest `stable` version of a package, unless overridden in commands such as `hab sup run`, `hab svc load`, and `hab pkg install`. If you want to promote your package to the `stable` channel, run the `hab pkg promote` command as follows:

```bash
$ hab pkg promote -z <TOKEN> origin/package/version/release stable
```

> **Note** You can also promote packages to the `stable` channel using the *promote to stable* button in the web app.

For more information on how to use channels, see [Continuous Deployment Using Channels](/docs/using-habitat/#continuous-deployment).

### Running Packages from Builder

> **Note:** When running private packages from Builder, it's necessary to add your [Chef Habitat access token](/docs/using-builder/#builder-token) to the machine where you intend to deploy the package, via `export HAB_AUTH_TOKEN=<token>`.

You can instruct the Supervisor to download and run packages from Builder by using the `hab sup` and `hab svc` commands, for example:

```bash
$ hab sup run
$ hab svc load core/postgresql
```

If the Supervisor does not have the `core/postgresql` package in its local cache, it will contact Builder, retrieve the latest version and the public key for the `core` origin, verify the cryptographic integrity of the package, and then start it.

You may also supply a `--channel` argument to instruct the Supervisor to use a different channel for the purposes of continuous deployment:

```bash
$ hab svc load core/postgresql --channel unstable
```

### Running Packages from Exported Tarballs

An exported tarball package contains the Chef Habitat client/binary as well as dependencies specified by your artifact.

After deploying the tarball to your target server, extract the contents to the root filesystem (`/`):

```bash
$ tar zxf core-nginx-1.11.10-20170616000025.tar.gz --directory /
```

You can instruct the Supervisor to run packages from an exported tarball:

```bash
$ /hab/bin/hab svc start core/nginx
```

Note: On a clean server, this will download additional packages to satisfy the Supervisor dependencies. You will also require a `hab` group and `hab` user on the system for most services.

---
## <a name="multiple-plans-builder" id="multiple-plans-builder" data-magellan-target="multiple-plans-builder">Using Multiple Plans</a>

If you have a GitHub repository with multiple components inside, you will most likely also have individual plans for those components that are located inside of component subfolders. By default, Builder will only look for a package plan in either the root of the repository, or in a `habitat` subfolder at the root. If it does not find a plan file in those locations, it will not automatically issue builds when it detects file changes in the repository.

In order to tell Builder about the location of the individual plan files, and in order provide more fine-grained control over when component packages are built, you can programmatically customize how and when Builder will build your plans by specifying build behavior in a `.bldr.toml` file at the root of the repository that you connect to Builder.

Using this file, Builder only builds packages when source files or directories are updated in paths specified in `.bldr.toml`. This allows you to configure the building, publishing, and post-processing phases of a plan build in Builder.

To enable this functionality, do the following:

1. Create a `.bldr.toml` in the root of your repository.

2. Open it and add an entry for each component package that you want to build.

    The `.bldr.toml` file is in TOML format, so create a TOML table specifying the `$pkg_name` value for that plan and then add a `plan_path` field specifying the path to your `plan.sh` file (you do not need to include plan.sh explicitly in the path). If all the files related to the plan are under the plan path, then you are done. Otherwise, you will need an additional 'paths' field specifying Unix-style path globs to files that are associated with the plan you specified in the 'plan_path'. File or directory changes made in these path locations determine which packages will be rebuilt. Basically, when a file is committed, Builder will check to see whether it falls underneath the `plan_path` hierarchy, or matches one of the globs in the `paths` field if it was specified - if the answer is yes, then Builder will issue a build for that commit.

    It's important to note that the entries for `plan_path` and `paths` do not behave the same. If you have something like `plan_path = "habitat"`, that behaves as if you had written `plan_path = "habitat/*"` - that is, it will automatically check every file under the `habitat` directory. However, if you have something like `paths = [ "src" ]`, that is _not_ automatically expanded to `src/*`. That line will only watch for changes to a file called `src`. If you're wanting to watch for changes to any file inside the `src` directory, then you must explicitly specify the glob, like so: `paths = [ "src/*" ]`.

    For example, in the Chef Habitat repository itself, this TOML states that the `hab-launcher`, `hab-studio`, and `hab-sup` packages will be rebuilt if there are any changes in any of the specified `components` sub-directories. Note that `hab-studio` does not need to specify a `path` because all of it's files are within the `plan_path` hierarchy, but that is not the case for the other projects.

    ```toml
    # .bldr.toml
    [hab-launcher]
    plan_path = "components/launcher/habitat"
    paths = [
      "components/launcher/*",
      "components/launcher-protocol/*",
      "support/ci/builder-base-plan.sh",
    ]

    [hab-studio]
    plan_path = "components/studio"

    [hab-sup]
    plan_path = "components/sup"
    paths = [
      "components/sup/*",
      "components/eventsrv-client/*",
      "components/launcher-client/*",
      "components/butterfly/*",
      "components/core/*",
      "components/builder-depot-client/*",
    ]
    ```

    Notice that in order to specify that we're interested in all files inside of the directories in our `paths` entries, we had to add the `/*` glob to the end manually.

    It's also worth pointing out that there are multiple wildcard characters you can use when specifying path components.

* `?` will match any single character.
* `*` will match any (possibly empty) sequence of characters
* `**` matches the current directory and arbitrary subdirectories. This sequence must form a single path component, so both `**a` and `b**` are invalid. More than two consecutive `*` characters is also invalid.
* `[...]` matches any character inside the brackets. You can also specify a range, such as `[0-9]` to match any digit or `[a-z]` to match any lowercase letter.
* `[!...]` is the negation of `[...]` so it will match any character *not* in the brackets.

    Note that while the above set of rules bears a remarkable resemblance to regular expressions, we do not support full regular expression syntax. Only what's shown here is supported. Here is an example.

    ```toml
    # .bldr.toml
    [hab-sup]
    plan_path = "components/sup"          # automatically checks every file inside the 'sup' directory
    paths = [
      "components/sup/?",                 # matches any file with a single character file name inside the 'sup' directory
      "components/eventsrv-client/*",     # matches any file inside the 'eventsrv-client' directory
      "components/launcher-client/**/*",  # matches any file inside the 'launcher-client' directory and also any of its sub-directories
      "components/butterfly/[0-9]*"       # matches any file inside the 'butterfly' directory that begins with a number
    ]
    ```

---
## <a name="automated-builds" id="automated-builds" data-magellan-target="automated-builds">Set up Automated Builds</a>

By connecting a plan file in <a href="https://bldr.habitat.sh/#/sign-in" class="link-external" target="_blank">Chef Habitat Builder</a>, you can trigger both manual (via the web UI, or via the `hab` command line) as well as automated package rebuilds whenever a change is merged into the `master` branch of the repository containing your Chef Habitat plan, or when a dependent package updates (rebuilds).

### Connect a Plan

To connect a plan to Builder, view one of your origins (while signed in), click the **Connect a plan file** button, and complete the following steps:

  - Install the Builder GitHub App
  - Choose the GitHub organization and repository containing your Chef Habitat plan
  - Choose a privacy setting for the package
  - Specify container-registry publishing settings (optional)
  - Specify auto-build option (default is off)

#### Auto-build Option

The auto-build option controls whether or not your package will get automatically re-built. This option is a useful capability to have - for example, if you have a demo app that doesnâ€™t need to be kept constantly up to date when some underlying dependency updates. Auto-build encompasses both builds that are triggered by Github web hooks (on commits to master), as well as builds that are triggered by a dependency updating.

By default, new plan connections will have auto-build turned off.

---
## <a name="on-prem" id="on-prem" data-magellan-target="on-prem">Install and Use Builder On-Premises</a>

In addition to our hosted service, we also support installing and running a Chef Habitat Builder Depot on-premises, using your own network and infrastructure, which allows you to choose from a wider selection of authentication providers and to manage how Builder fits into your existing CI/CD processes.

Currently, our on-premises Builder depot only stores packages for download and upload by Supervisors and Studios. We intend to bring the full capabilities of Chef Habitat Builder to our on premises option in the future.

For a detailed explanation of features, requirements and setup instructions, [see the GitHub repository](https://github.com/habitat-sh/on-prem-builder).

---
## <a name="using-custom-certs" id="using-custom-certs" data-magellan-target="using-custom-certs">Using Custom Certificates</a>

Many enterprise environments use custom certificates (for example, self-signed). For example, an on-premises Chef Habitat Builder Depot might have a self-signed SSL certificate.

Attempting to perform an operation using the Habitat client to communicate with a service that has a custom certificate can produce an error, such as:
```
âœ—âœ—âœ—
âœ—âœ—âœ— the handshake failed: The OpenSSL library reported an error: error:14090086:SSL routines:ssl3_get_server_certificate:certificate verify failed:s3_clnt.c:1269:: unable to get local issuer certificate
âœ—âœ—âœ—
```

One option to remediate this error is to define a `SSL_CERT_FILE` environment variable pointing to the custom certificate path before performing the client operation.

The Habitat 0.85.0 release in September 2019 improved the handling of custom certificates. Now Habitat knows to look for custom certificates in the `~/.hab/cache/ssl` directory, which is `/hab/cache/ssl` when you are running as root. Copying multiple certificates--for example, a self-signed certificate and a custom certificate authority certificate--to the Chef Habitat cache directory makes them automatically available to the Habitat client.

The `/hab/cache/ssl` directory is also available inside a Habitat Studio. As long as the certificates are inside the cache directory before you enter the Studio, you'll also find them inside the Studio. In addition, if you've set the `SSL_CERT_FILE` environment variable, you'll also find both it and the file that it points to inside the Studio`/hab/cache/ssl` directory.

Note: The `cert.pem` file name is reserved for Habitat. Do not use `cert.pem` as a file name when copying certs into the cache directory.
